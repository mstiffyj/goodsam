/*
 * File: app/controller/Main.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.1.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RSS.controller.Main', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            mainView: {
                autoCreate: true,
                selector: 'mainview',
                xtype: 'mainview'
            },
            loginView: {
                autoCreate: true,
                selector: 'loginview',
                xtype: 'loginview'
            },
            logoutButton: 'button[action=logout]',
            newFeedButton: 'button[action=newfeed]',
            usersButton: 'button[action=users]',
            registerView: {
                autoCreate: true,
                selector: 'registerview',
                xtype: 'registerview'
            }
        },

        control: {
            "loginview button[action=login]": {
                tap: 'onLoginTap'
            },
            "navigationview": {
                push: 'onNavigationviewPush',
                pop: 'onNavigationviewPop'
            },
            "button[action=logout]": {
                tap: 'onLogout'
            },
            "loginview button[action=registerview]": {
                tap: 'onRegisterTap'
            },
            "registerview button[action=register]": {
                tap: 'onRegTap'
            }
        }
    },

    onLoginTap: function(button, e, options) {
        this.getLoginView().submit({
            url: 'api/v1/users/login',
            method: 'POST',
            scope: this,
            success: function(form, response){
                this.loginComplete (response.user);
            },
            failure: function(form, response){
                Ext.Msg.alert('Login Failed', 'Please try again.');
            }
        });
    },

    onNavigationviewPush: function(navigationView, view, options) {
        if(view instanceof RSS.view.News || 
        view instanceof RSS.view.FeedEdit){
            this.hideLogoutButton();
            this.hideNewFeedButton();
            this.hideUsersButton();

        }
    },

    onNavigationviewPop: function(navigationView, view, options) {
        if(view instanceof RSS.view.News ||
        view instanceof RSS.view.FeedEdit){
            this.showLogoutButton();
            this.showNewFeedButton();
            this.showUsersButton();

        }
    },

    onLogout: function(button, e, options) {
        Ext.Msg.confirm('Logout', 'Are you sure you want to log out?', function(btn){
            if(btn === 'yes'){
                delete window.localStorage.user;
                window.location.reload();
            }
        });

    },

    onRegisterTap: function(button, e, options) {
        this.getApplication().fireEvent('showview', this.getRegisterView());

    },

    onRegTap: function(button, e, options) {
        this.getRegisterView().submit({
            url: 'api/v1/users/new',
            method: 'POST',
            scope: this,
            success: function(form, response){
                Ext.Msg.alert('Registration Successful', 'Please log in.');
            },
            failure: function(form, response){
                Ext.Msg.alert('Registration Failed', 'Please try again.');
            }
        });
    },

    showView: function(view) {
        this.getMainView().push(view);
    },

    back: function() {
        this.getMainView().pop();
    },

    launch: function() {
        var user = window.localStorage.user;

        if(user){
            this.silentlogin(Ext.decode(user));
        }
        else {
            this.showView(this.getLoginView());
        }
    },

    silentlogin: function(user) {
        Ext.Ajax.request({
            url: 'api/v1/users/login',
            method: 'POST',
            params: {
                username: user.username,
                password: user.password
            },
            scope: this,
            success: function(response){
                this.loginComplete(Ext.decode(response.responseText).user);
            },
            failure: function(response){
                Ext.Msg.alert('Login Failed', 'Please try again.');

            }
        });
    },

    loginComplete: function(user) {
        window.localStorage.user = Ext.encode(user);
        this.getApplication().fireEvent('showfeeds');
        this.showLogoutButton();
        this.showNewFeedButton();
        this.showUsersButton();
    },

    showLogoutButton: function() {
        this.getMainView().getNavigationBar().add({
            xtype: 'button',
            action: 'logout',
            ui: 'action',
            text: 'Logout'
        });

        this.getLogoutButton().show({
            type: 'pop'
        });
    },

    showNewFeedButton: function() {
        this.getMainView().getNavigationBar().add({
            xtype: 'button',
            action: 'newfeed',
            ui: 'action',
            iconMask: true,
            iconCls: 'add',
            align: 'right'
        });

        this.getNewFeedButton ().show({
            type: 'pop'
        });
    },

    hideLogoutButton: function() {
        this.getLogoutButton().destroy(true);
    },

    hideNewFeedButton: function() {
        this.getNewFeedButton().destroy(true);

    },

    showUsersButton: function() {
        this.getMainView().getNavigationBar().add({
            xtype: 'button',
            action: 'users',
            ui: 'action',
            iconMask: true,
            iconCls: 'user',
            align: 'right'
        });

        this.getUsersButton ().show({
            type: 'pop'
        });
    },

    hideUsersButton: function() {
        this.getUsersButton().destroy(true);
    },

    init: function(application) {

        application.on([
        { event: 'showview', fn: this.showView, scope: this },
        { event: 'back', fn: this.back, scope: this }
        ]);
    }

});